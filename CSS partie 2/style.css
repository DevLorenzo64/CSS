:root {
    --color1: blue;
    --color2: rgba(175, 210, 35, 0.41);
    --color3: orange;
    --color4: rgb(72, 16, 27);
}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    /* le center cover ci dessous sert à centrer et à couvrir l'intégralité de la page sur des background*/
    background:url(./cloud.png) center/cover;
    height: 100vh;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    color: var(--color4);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.card {
    background: var(--color2);
    /* La méthode calc est utile pour faire des calculs un peu plus complexe ex : centrer ou aligner des élèments */
    width: calc(100% - 50px);
    padding: 20px 20px 6px;
    box-shadow: -7px 4px 14px 0px;
    border-radius: 5px;
    /* Le blur est utile pour flouter l'arrière de la card */
    backdrop-filter: Blur(20px);
}

/* La fonction before ou aftetr est intéressante car elle permet d'intégrer des élèments directement via le CSS */
.card:before {
    content: "\2104";
   /* Permet de déplacer les élèments ou l'on veut */
    position: absolute;
    top: 0;
    right: 10px;
    /* pour les fonts ce sont des rem */
    font-size: 2rem;
}

h1 {
    margin-bottom: 24px;
    text-align: center;
    position: relative;
}
h1::after {
    /* Le content est obligatoire lors d'un before ou d'un after même si il est vide */
    content: "";
    position: absolute;
    background: var(--color3);
    height: 1px;
    width: 100%;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%) scaleX(0);
    animation: h1anim 3s ease-in-out infinite alternate-reverse;
    transform-origin: center;
}

@keyframes h1anim {
    100% {
        transform: translateX(-50%) scaleX(1);
    }
}

.grid-container {
    display: grid;
    grid-template-columns: 20% 80%;
}
.polygon-container {
    filter: drop-shadow(-1px 9px 3px var(--color2));
    /* Mettre le parent en grid */
    place-self: center left;   
    
}
.polygon {
    clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
    background: linear-gradient(145deg, var(--color3) 0%, var(--color1) 100%);
    height: 100px;
    width: 100px;
}

.polygon:after {
    content: "texte";
    position : absolute;
    color: (var(--color2));
    background: var(--color3);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(40deg);
    width: 90px;
    padding: 5px;
    text-align: center;
}

p {
    line-height: 25px;
    margin: 20px 0;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 5;
    overflow: hidden;
    text-align: justify;
}

p::selection {
    background: var(--color2);
    color: var(--color1);
}

.checkbox-container {
    display: flex;
    justify-content: space-around;
    margin: 20px 0 30px;
    perspective: 80px;
}

input[type="checkbox"] {
display: none;
}
/* Le moindre petit espace ou erreur de syntaxe détruit littéralement le code ! ATTENTION */
input[type="checkbox"]:checked + label {
    background: blueviolet;
    color: aliceblue;
    /* Change taille des boutons lors du clic */
    transform: scale(1.1);
    /* Change la luminosité */
    filter: brightness(120%);
    }

label {
    cursor: pointer;
    border: 1px solid var(--color1);
    background: var(--color3);
    padding: 10px;
    border-radius: 5px;
    /* Temps d'affichage et de cliquage sur les input*/
    transition: 102ms;
    user-select: none;
}

label:first-of-type:hover {
    animation: label1 1s infinite linear;
}

@keyframes label1 {
    50% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
    }
}

label:nth-child(4):hover {
    animation: label2 2s infinite linear
}
/* NE PAS OUBLIER LA PERSPECTIVE SUR LE PARENT SINN LA 3D NE MARCHE PAS (donc à checkbox container dcp)*/
@keyframes label2 {
    33% {
        transform: translateZ(30px);
    }
    66% {
        transform: translateZ(-40px);
    }
    100% {
        transform: translateZ(0);
    }
}

.email {
    text-align: center;
    margin-bottom: 20px;

}

.email input {
    padding: 10px;
    border-radius: 5px;
    outline: none;
    border: none;
    transition: 0.5s;
    text-align: center;
    font-size: 1.3rem;
    min-width: 190px;
    width: 35%;
    max-width: 300px;
}
/* ATTENTION, pour les transition et tous en général, on doit mettre des points pour remplacer les virgules sur les chiffres sinon ça ne marche pas */
input[type="text"]:focus{ 
    background: transparent;
    border: 3px solid cornflowerblue;
    border-radius: 35%;
}
input[type="text"]::placeholder {
    color: violet;
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
}
button {
    cursor: pointer;
    background: greenyellow;
    border: none;
    font-size: 1.1rem;
    padding: 10px 20px;
    border-radius: 10px;
    margin: 0 auto; 
    display: block;
    transition: 0.4s ease;
    position: relative;
    animation: moveText 1s infinite;
}

@keyframes moveText {
    0% {
        transform: translateX(0);
    }
    50% {
        transform: translateX(5px);
    }
    100% {
        transform: translateX(0);
    }
}

button:hover {
    transform: translateY(-5px);
    letter-spacing: 3px;
}
button:active {
    transform: scale(1.1);
    background: green;
}
button:hover + a, 
a:hover {
    opacity: 1;
    transform: translateY(0);
}
a {
    color: bisque;
    text-align: center;
    /* Généralement si ça ne veut pas se centrer même avec un display block, c'est parce que, de base, l'élèment a déjà un display */
    display: block;
    opacity: 0;
    transform: translateY(10px);
    transition: 0.3s;
}

a:visited {
    color: blueviolet;
}

img {
    height: 60px;
    position: absolute;
    filter: drop-shadow(0px 6px 3px yellow);
    /* Le z-index est utile car il met les élèments dans des couches. la couche -1 signifie qu'il serait derrière la card par exemple */
    z-index: -1;
    animation: spaceship 10s infinite linear;
}

@keyframes spaceship {
    0% {
        top: 2%;
        left: 2%;
        transform: rotate(75deg);
    }
    10% {
        top: 15%;
        left: 30%;
        transform: rotate(90deg)
    }
    20% {
        top: 28%;
        left: 60%;
        transform: rotate(90deg)
    }
    30% {
        top: 18%;
        left: 87%;
        transform: rotate(90deg)
    }  
    40% {
        top: 50%;
        left: 90%;
        transform: rotate(90deg)
    }
    50% {
        top: 47%;
        left: 70%;
        transform: rotate(90deg)
    }
    60% {
        top: 60%;
        left: 40%;
        transform: rotate(90deg)
    }
    70% {
        top: 103%;
        left: 30%;
        transform: rotate(90deg)
    }
    80%{
        top: 54%;
        left: 25%;
        transform: rotate(90deg)
    }
    90% {
        top: 28%;
        left: 17%;
        transform: rotate(90deg)
    }
    100% {
        top: 2%;
        left: 2%;
        transform: rotate(90deg)
    }

}